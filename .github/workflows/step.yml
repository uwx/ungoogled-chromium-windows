name: Build ungoogled-chromium single step

on:
  workflow_call:
    inputs:
      finished:
        required: true
        type: boolean
      first:
        required: false
        default: false
        type: boolean
      x86:
        required: false
        default: false
        type: boolean
      num:
        required: false
        default: -1
        type: number
    outputs:
      finished:
        value: ${{ inputs.finished || jobs.pt1.outputs.finished }}

jobs:
  pt1:
    name: step ${{ inputs.num }}
    if: '!inputs.finished'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
    env:
      STORE_PATH: 'unset fixme'
      CACHE_PREFIX: ${{ matrix.os }}
      PROJECT_LOCATION: C:\ungoogled-chromium-windows
    steps:
      - run: Get-PSDrive

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Copy ungoogled-chromium stuff to C drive
        run: Copy-Item -Path . -Destination $env:PROJECT_LOCATION -Recurse

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install python dependencies
        run: pip install -r requirements.txt

      - name: Get pnpm store directory
        run: echo "STORE_PATH=$(pnpm store path --silent)" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ env.CACHE_PREFIX }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ env.CACHE_PREFIX }}-pnpm-store-

      - name: Download previously compiled LLVM
        uses: actions/download-artifact@v3
        with:
          name: chromium-llvm
          path: ${{ env.PROJECT_LOCATION }}\build\src\third_party\llvm-build

      - name: Setup third-party tool cache
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.PROJECT_LOCATION }}\build\download_cache
            ${{ env.PROJECT_LOCATION }}\build\src\third_party
            !${{ env.PROJECT_LOCATION }}\build\src\third_party\llvm-build
          key: ${{ env.CACHE_PREFIX }}-downloads-${{ hashFiles('**/downloads.ini', '**/chromium_version.txt') }}
          restore-keys: |
            ${{ env.CACHE_PREFIX }}-downloads-partial-including-extracted-${{ hashFiles('**/downloads.ini', '**/chromium_version.txt') }}
            ${{ env.CACHE_PREFIX }}-downloads-partial-download-only-${{ hashFiles('**/downloads.ini', '**/chromium_version.txt') }}

      - name: Setup PGO profile cache
        uses: actions/cache@v3
        with:
          path: '**.profdata'
          key: ${{ env.CACHE_PREFIX }}-pgo-${{ hashFiles('**.profdata') }}
          restore-keys: |
            ${{ env.CACHE_PREFIX }}-pgo-

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          max-size: 5G
          key: sccache-chromium-${{ env.CACHE_PREFIX }}-${{ inputs.x86 && 'x86' || 'x64' }}
          variant: sccache

      - name: Install node.js dependencies
        id: pnpm-install
        run: pnpm install
        working-directory: ./.github/actions/stage

      - name: Run stage
        id: stage
        uses: ./.github/actions/stage
        with:
          finished: ${{ inputs.finished }}
          from_artifact: ${{ !inputs.first }}
          x86: ${{ inputs.x86 }}

      - name: Copy PGO profile to workspace for caching
        id: copy-pgo
        run: Copy-Item -Path $env:PROJECT_LOCATION -Filter *.profdata -Destination $env:GITHUB_WORKSPACE -Recurse

      - name: Fallback save PGO cache on build failure
        if: failure() && steps.copy-pgo.outcome == 'success'
        uses: actions/cache/save@v3
        with:
          path: |
            **.profdata
            ${{ env.PROJECT_LOCATION }}\**.profdata
          key: ${{ env.CACHE_PREFIX }}-pgo-${{ hashFiles('**.profdata') }}

      - name: Fallback save pnpm cache on build failure
        if: failure() && steps.pnpm-install.outcome == 'success'
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ env.CACHE_PREFIX }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ env.CACHE_PREFIX }}-pnpm-store-
    outputs:
      finished: ${{ steps.stage.outputs.finished }}