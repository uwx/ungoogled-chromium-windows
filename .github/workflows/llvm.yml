on:
  workflow_dispatch:
    inputs:
      build_target:
        description: 'Ninja build target'
        required: false
        default: check-all
      projects:
        description: 'Projects to build'
        required: false
        default: clang;clang-tools-extra;lldb;lld;polly;cross-project-tests
      ref:
        description: 'llvm/llvm-project ref to build'
        required: true
  workflow_call:
    inputs:
      build_target:
        description: 'Ninja build target'
        required: false
        default: check-all
        type: string

      projects:
        description: 'Projects to build'
        required: false
        default: clang;clang-tools-extra;lldb;lld;polly;cross-project-tests
        type: string

      ref:
        description: 'llvm/llvm-project ref to build'
        required: true
        type: string
    outputs:
      artifacts:
        description: 'Stringified JSON mapping from OS -> artifact name'
        value: ${{ jobs.build_llvm.outputs.results }}

jobs:
  build_llvm:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        name:
          - build-latest
        include:
          - name: build-latest
            ref: ${{ inputs.ref }}
            repo: llvm/llvm-project
        os:
          - ubuntu-latest
          # Use windows-2019 due to:
          # https://developercommunity.visualstudio.com/t/Prev-Issue---with-__assume-isnan-/1597317
          - windows-2019
          # We're using a specific version of macOS due to:
          # https://github.com/actions/virtual-environments/issues/5900
          - macOS-11
    steps:
      - name: Setup Windows
        if: startsWith(matrix.os, 'windows')
        uses: llvm/actions/setup-windows@main
        with:
          arch: amd64

      # On Windows, starting with win19/20220814.1, cmake choose the 32-bit
      # python3.10.6 libraries instead of the 64-bit libraries when building
      # lldb.  Using this setup-python action to make 3.10 the default
      # python fixes this.
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1
        with:
          # A full build of llvm, clang, lld, and lldb takes about 250MB
          # of ccache space. There's not much reason to have more than this,
          # because we usually won't need to save cache entries from older
          # builds.  Also, there is an overall 10GB cache limit, and each
          # run creates a new cache entry so we want to ensure that we have
          # enough cache space for all the tests to run at once and still
          # fit under the 10 GB limit.
          max-size: 500M
          key: sccache-${{ matrix.os }}
          variant: sccache

      - name: Download source code
        uses: llvm/actions/get-llvm-project-src@main
        with:
          ref: ${{ matrix.ref }}
          repo: ${{ matrix.repo }}

      - name: Get LLVM version
        id: version
        uses: llvm/actions/get-llvm-version@main

      - name: Install Ninja
        uses: llvm/actions/install-ninja@main

      - name: Build and Test
        uses: llvm/actions/build-test-llvm-project@main
        env:
          # Workaround for https://github.com/actions/virtual-environments/issues/5900.
          # This should be a no-op for non-mac OSes
          PKG_CONFIG_PATH: /usr/local/Homebrew/Library/Homebrew/os/mac/pkgconfig//12
        with:
          cmake_args: '-GNinja -DLLVM_ENABLE_PROJECTS="${{ inputs.projects }}" -DCMAKE_BUILD_TYPE=Release -DLLDB_INCLUDE_TESTS=OFF -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CXX_COMPILER_LAUNCHER=sccache'
          build_target: '${{ inputs.build_target }}'

      - name: Upload compiled results
        id: upload-artifact
        uses: actions/upload-artifact@v3
        with:
          name: llvm-${{ matrix.name }}-${{ matrix.ref }}
          path: '**'
          retention-days: 5

      #- name: Publish release
      #  id: publish
      #  uses: softprops/action-gh-release@cd28b0f5ee8571b76cfdaa62a30d51d752317477
      #  with:
      #    fail_on_unmatched_files: true
      #    tag_name: llvm-${{ matrix.name }}-${{ matrix.ref }}
      #    files: |
      #      TODO*

      #- name: Install abi-compliance-checker
      #  run: |
      #    sudo apt-get install abi-dumper autoconf pkg-config

      #- name: Install universal-ctags
      #  run: |
      #    git clone https://github.com/universal-ctags/ctags.git
      #    cd ctags
      #    ./autogen.sh
      #    ./configure
      #    sudo make install
      #- name: Configure
      #  run: |
      #    mkdir install
      #    cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=Debug -DLLVM_TARGETS_TO_BUILD="" -DLLVM_BUILD_LLVM_DYLIB=ON -DCMAKE_C_FLAGS_DEBUG="-g1 -Og" -DCMAKE_CXX_FLAGS_DEBUG="-g1 -Og" -DCMAKE_INSTALL_PREFIX="$(pwd)"/install llvm
      #- name: Build
      #  # Need to run install-LLVM twice to ensure the symlink is installed (this is a bug).
      #  run: |
      #    ninja -C build install-LLVM
      #    ninja -C build install-LLVM
      #    ninja -C build install-llvm-headers
      #- name: Dump ABI
      #  run: |
      #    if [ "${{ needs.abi-dump-setup.outputs.ABI_HEADERS }}" = "llvm-c" ]; then
      #      nm ./install/lib/libLLVM.so | awk "/T _LLVM/ || /T LLVM/ { print $3 }" | sort -u | sed -e "s/^_//g" | cut -d ' ' -f 3 > llvm.symbols
      #      # Even though the -symbols-list option doesn't seem to filter out the symbols, I believe it speeds up processing, so I'm leaving it in.
      #      export EXTRA_ARGS="-symbols-list llvm.symbols"
      #    else
      #      touch llvm.symbols
      #    fi
      #    abi-dumper "$EXTRA_ARGS" -lver ${{ matrix.ref }} -skip-cxx -public-headers ./install/include/${{ needs.abi-dump-setup.outputs.ABI_HEADERS }} -o ${{ matrix.ref }}.abi ./install/lib/libLLVM.so
      #    # Remove symbol versioning from dumps, so we can compare across major versions.
      #    sed -i 's/LLVM_${{ matrix.llvm_version_major }}/LLVM_NOVERSION/' ${{ matrix.ref }}.abi
      #- name: Upload ABI file
      #  uses: actions/upload-artifact@v3
      #  with:
      #    name: ${{ matrix.name }}
      #    path: ${{ matrix.ref }}.abi

      #- name: Upload symbol list file
      #  if: matrix.name == 'build-baseline'
      #  uses: actions/upload-artifact@v3
      #  with:
      #    name: symbol-list
      #    path: llvm.symbols

      - name: output
        id: output
        shell: bash
        run: |
          echo "${{ matrix.os }}=llvm-${{ matrix.name }}-${{ matrix.ref }}" >> $GITHUB_OUTPUT
    outputs:
      results: ${{ toJSON(steps.output.outputs) }}