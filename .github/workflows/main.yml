name: CI
on:
  push:
    branches:
      - master
    tags:
      - '*'
      - '!llvm-*'
  workflow_dispatch:
  repository_dispatch:
    types: [updated-from-upstream]

concurrency:
  group: ${{ github.workflow }}-llvm-enabled-build-pgoless-artifacts-v2-2
  cancel-in-progress: true

permissions:
  contents: write # to be able to create releases

jobs:
  #build-llvm:
  #  uses: ./.github/workflows/build_llvm.yml

  build-chromium:
    strategy:
      matrix:
        x86: [true, false]
    #needs: build-llvm
    name: ${{ matrix.x86 && 'x86 build' || 'x64 build' }}
    uses: ./.github/workflows/chromium_build.yml
    with:
      x86: ${{ matrix.x86 }}
      has-stage-artifact: false #${{ needs.build-llvm.outputs.has_stage_artifact }}
      local-llvm: false

  publish-release:
    needs: build-chromium
    runs-on: ubuntu-latest
    env:
      RELEASE_TAG: fixme pls
      CHROMIUM_VERSION: fixme pls
      REVISION: fixme pls
      PACKAGING_REVISION: fixme pls
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: uwx/actions/setup-pstoolkit@main

      - name: Download package
        uses: actions/download-artifact@v3
        with:
          name: chromium
      - name: Download x86 package
        uses: actions/download-artifact@v3
        with:
          name: chromium-x86

      - name: Tag published version
        shell: pwsh
        run: |
          $CHROMIUM_VERSION = $((Get-Content ./ungoogled-chromium/chromium_version.txt | Out-String).Trim())
          $REVISION = $((Get-Content ./ungoogled-chromium/revision.txt | Out-String).Trim())
          $PACKAGING_REVISION = $((Get-Content ./revision.txt | Out-String).Trim())

          Set-GitHubActionsEnv CHROMIUM_VERSION "$CHROMIUM_VERSION"
          Set-GitHubActionsEnv REVISION "$REVISION"
          Set-GitHubActionsEnv PACKAGING_REVISION "$PACKAGING_REVISION"

          Set-GitHubActionsEnv RELEASE_TAG "$CHROMIUM_VERSION-$REVISION.$PACKAGING_REVISION-$env:GITHUB_SHA-$env:GITHUB_RUN_ID"

      - name: Create auto-update files
        uses: ./.github/actions/create-chrlauncher-update-files

      - name: Create Release
        id: publish
        # You may pin to the exact commit or the version.
        # uses: ncipollo/release-action@a2e71bdd4e7dab70ca26a852f29600c98b33153e
        uses: ncipollo/release-action@v1.12.0
        with:
          # An optional flag which indicates if we should update a release if it already exists. Defaults to false.
          allowUpdates: true # optional, default is
          # An optional flag which indicates if artifact read or upload errors should fail the build.
          artifactErrorsFailBuild: false # optional, default is
          # An optional set of paths representing artifacts to upload to the release. This may be a single path or a comma delimited list of paths (or globs)
          artifacts: ungoogled-chromium*,chrlauncher_update_*.txt
          # The content type of the artifact. Defaults to raw
          artifactContentType: raw # optional, default is
          # An optional body for the release.
          # body: # optional, default is
          # An optional body file for the release. This should be the path to the file
          # bodyFile: # optional, default is
          # An optional commit reference. This will be used to create the tag if it does not exist.
          commit: ${{github.sha}} # optional, default is
          # When provided this will generate a discussion of the specified category. The category must exist otherwise this will cause the action to fail. This isn't used with draft releases
          # discussionCategory: # optional, default is
          # Optionally marks this release as a draft release. Set to true to enable.
          draft: false # optional, default is
          # Indicates if release notes should be automatically generated.
          generateReleaseNotes: false # optional, default is false
          # Indicates if the release should be the "latest" release or not.
          makeLatest: true # optional, default is legacy
          # An optional name for the release. If this is omitted the tag will be used.
          name: ungoogled-chromium ${{ env.CHROMIUM_VERSION }}-${{env.REVISION}}.${{env.PACKAGING_REVISION}} # optional, default is
          # Optionally specify the owner of the repo where the release should be generated. Defaults to current repo's owner.
          # owner: # optional, default is
          # Optionally marks this release as prerelease. Set to true to enable.
          prerelease: true # optional, default is
          # Indicates if existing release artifacts should be removed, Defaults to false.
          removeArtifacts: false # optional, default is false
          # Indicates if existing release artifacts should be replaced. Defaults to true.
          replacesArtifacts: true # optional, default is true
          # Optionally specify the repo where the release should be generated. Defaults to current repo
          # repo: # optional, default is
          # When skipIfReleaseExists is enabled the action will be skipped if a non-draft release already exists for the provided tag.
          # skipIfReleaseExists: true # optional, default is false
          # An optional tag for the release. If this is omitted the git ref will be used (if it is a tag).
          tag: ${{ env.RELEASE_TAG }} # optional, default is
          # The Github token.
          token: ${{ github.token }}
          # When allowUpdates is enabled, this will fail the action if the release it is updating is not a draft or a prerelease.
          # updateOnlyUnreleased: # optional, default is false

  #publish-winget:
  #  needs: publish-release
  #  runs-on: windows-2019
  #  steps:
  #    - name: Checkout
  #      uses: actions/checkout@v3
  #    - name: Setup Stage
  #      run: npm install
  #      working-directory: ./.github/actions/winget
  #    - name: Run Stage
  #      id: stage
  #      uses: ./.github/actions/winget
  #      with:
  #        token: ${{ secrets.PAT }}
  #        version: ${{ github.ref_name }}
  #        assets: ${{ needs.publish-release.outputs.assets }}
