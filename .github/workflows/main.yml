name: CI
on:
  push:
    branches:
      - 'master'
    tags:
      - '*'
      - '!llvm-*'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

permissions:
  contents: write # to be able to create releases

jobs:
  build-mimalloc:
    uses: ./.github/workflows/mimalloc.yml

  build-llvm:
    needs: build-mimalloc
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-2019]
    env:
      STORE_PATH: 'unset fixme'
      CACHE_PREFIX: ${{ matrix.os }}
      PROJECT_LOCATION: C:\ungoogled-chromium-windows
    steps:
      - name: Download static mimalloc
        uses: actions/download-artifact@v2
        with:
          name: ${{ needs.build-mimalloc.outputs.artifact }}
          path: C:/mimalloc.lib

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Copy ungoogled-chromium stuff to C drive
        run: Copy-Item -Path . -Destination $env:PROJECT_LOCATION -Recurse

      #- name: Install pnpm
      #  uses: pnpm/action-setup@v2
      #  with:
      #    version: 8
      #    run_install: false

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install python dependencies
        run: pip install -r requirements.txt

      #- name: Get pnpm store directory
      #  run: echo "STORE_PATH=$(pnpm store path --silent)" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      #- name: Setup pnpm cache
      #  uses: actions/cache@v3
      #  with:
      #    path: ${{ env.STORE_PATH }}
      #    key: ${{ env.CACHE_PREFIX }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
      #    restore-keys: |
      #      ${{ env.CACHE_PREFIX }}-pnpm-store-

      - name: Setup third-party tool cache
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.PROJECT_LOCATION }}\build\download_cache
            ${{ env.PROJECT_LOCATION }}\build\src\third_party
          key: ${{ env.CACHE_PREFIX }}-downloads-${{ hashFiles('**/downloads.ini', '**/chromium_version.txt') }}

      - name: Setup PGO profile cache
        uses: actions/cache@v3
        with:
          path: |
            **.profdata
            ${{ env.PROJECT_LOCATION }}\**.profdata
          key: ${{ env.CACHE_PREFIX }}-pgo-${{ hashFiles('**.profdata') }}

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          max-size: 512M
          key: sccache-llvm-${{ env.CACHE_PREFIX }}
          variant: sccache

      #- name: Install node.js dependencies
      #  run: pnpm install
      #  working-directory: ./.github/actions/stage

      - name: Run build.py to download tools and apply patches
        run: python -u build.py --ci --no-build
        working-directory: ${{ env.PROJECT_LOCATION }}

      - name: Copy PGO profile to workspace for caching
        id: copy-pgo
        run: Copy-Item -Path $env:PROJECT_LOCATION -Filter *.profdata -Destination $env:GITHUB_WORKSPACE -Recurse

      - name: Build Chromium LLVM
        run: python tools/clang/scripts/build.py --bootstrap --without-android --without-fuchsia --disable-asserts --thinlto --pgo --bolt --llvm-force-head-revision

      - name: Upload compiled results
        id: upload-artifact
        uses: actions/upload-artifact@v3
        with:
          name: chromium-llvm
          path: ${{ env.PROJECT_LOCATION }}\build\src\third_party\llvm-build
          retention-days: 5

      - name: Upload .patch rejects on build failure
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: patch-rejects
          path: |
            ${{ env.PROJECT_LOCATION }}\**\*.rej
            **\*.rej
          retention-days: 90

      - name: Fallback save downloads cache on build failure
        if: failure()
        uses: actions/cache/save@v3
        with:
          path: |
            ${{ env.PROJECT_LOCATION }}\build\download_cache
            ${{ env.PROJECT_LOCATION }}\build\src\third_party
          key: ${{ env.CACHE_PREFIX }}-downloads-${{ hashFiles('**/downloads.ini', '**/chromium_version.txt') }}

      - name: Fallback save PGO cache on build failure
        if: failure() && steps.copy-pgo.outcome == 'success'
        uses: actions/cache/save@v3
        with:
          path: |
            **.profdata
            ${{ env.PROJECT_LOCATION }}\**.profdata
          key: ${{ env.CACHE_PREFIX }}-pgo-${{ hashFiles('**.profdata') }}

  build-chromium:
    strategy:
      matrix:
        x86: [true, false]
    needs: build-llvm
    name: ${{ matrix.x86 && 'x86 build' || 'x64 build' }}
    uses: ./.github/workflows/build.yml
    with:
      x86: ${{ matrix.x86 }}

  publish-release:
    needs: build-chromium
    runs-on: ubuntu-latest
    steps:
      - name: Download package
        uses: actions/download-artifact@v2
        with:
          name: chromium
      - name: Download x86 package
        uses: actions/download-artifact@v2
        with:
          name: chromium-x86
      - name: Publish release
        id: publish
        uses: softprops/action-gh-release@cd28b0f5ee8571b76cfdaa62a30d51d752317477
        with:
          fail_on_unmatched_files: true
          files: |
            ungoogled-chromium*
    outputs:
      assets: ${{ steps.publish.outputs.assets }}

  #publish-winget:
  #  needs: publish-release
  #  runs-on: windows-2019
  #  steps:
  #    - name: Checkout
  #      uses: actions/checkout@v3
  #    - name: Setup Stage
  #      run: npm install
  #      working-directory: ./.github/actions/winget
  #    - name: Run Stage
  #      id: stage
  #      uses: ./.github/actions/winget
  #      with:
  #        token: ${{ secrets.PAT }}
  #        version: ${{ github.ref_name }}
  #        assets: ${{ needs.publish-release.outputs.assets }}
