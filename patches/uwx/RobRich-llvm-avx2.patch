diff --git a/tools/clang/scripts/build.py b/tools/clang/scripts/build.py
index e931b3d1efda6..207b823396f48 100755
--- a/tools/clang/scripts/build.py
+++ b/tools/clang/scripts/build.py
@@ -377,6 +377,10 @@ def BuildLibXml2():
           '-DLIBXML2_WITH_XPATH=OFF',
           '-DLIBXML2_WITH_XPTR=OFF',
           '-DLIBXML2_WITH_ZLIB=OFF',
+          '-DCMAKE_C_FLAGS_RELEASE=-O3 -DNDEBUG -w -march=x86-64-v3 -mprefer-avx128 -ffp-contract=fast -fmerge-all-constants -fipa-pta -fgraphite-identity -floop-nest-optimize -pipe -fdata-sections -ffunction-sections ',
+          '-DCMAKE_EXE_LINKER_FLAGS=-Wl,-O1 -Wl,--gc-sections -Wl,--as-needed -Wl,--push-state,C:/mimalloc.lib,--pop-state ',
+          '-DCMAKE_SHARED_LINKER_FLAGS=-Wl,-O1 -Wl,--gc-sections -Wl,--as-needed -Wl,--push-state,C:/mimalloc.lib,--pop-state ',
+          '-DCMAKE_MODULE_LINKER_FLAGS=-Wl,-O1 -Wl,--gc-sections -Wl,--as-needed -Wl,--push-state,C:/mimalloc.lib,--pop-state ',
           '..',
       ],
       setenv=True)
@@ -454,6 +458,11 @@ def BuildZStd():
           '-DCMAKE_OSX_ARCHITECTURES=arm64;x86_64',
           '-DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded',  # /MT to match LLVM.
           '-DZSTD_BUILD_SHARED=OFF',
+          '-DCMAKE_C_FLAGS_RELEASE=-O3 -DNDEBUG -w -march=x86-64-v3 -mprefer-avx128 -ffp-contract=fast -fmerge-all-constants -fipa-pta -fgraphite-identity -floop-nest-optimize -pipe -fdata-sections -ffunction-sections ',
+          '-DCMAKE_CXX_FLAGS_RELEASE=-O3 -DNDEBUG -w -march=x86-64-v3 -mprefer-avx128 -ffp-contract=fast -fmerge-all-constants -fipa-pta -fgraphite-identity -floop-nest-optimize -pipe -fdata-sections -ffunction-sections ',
+          '-DCMAKE_EXE_LINKER_FLAGS=-Wl,-O1 -Wl,--gc-sections -Wl,--as-needed -Wl,--push-state,C:/mimalloc.lib,--pop-state ',
+          '-DCMAKE_SHARED_LINKER_FLAGS=-Wl,-O1 -Wl,--gc-sections -Wl,--as-needed -Wl,--push-state,C:/mimalloc.lib,--pop-state ',
+          '-DCMAKE_MODULE_LINKER_FLAGS=-Wl,-O1 -Wl,--gc-sections -Wl,--as-needed -Wl,--push-state,C:/mimalloc.lib,--pop-state ',
           '../build/cmake',
       ],
       setenv=True)
@@ -721,9 +730,11 @@ def main():

   global CLANG_REVISION, PACKAGE_VERSION, LLVM_BUILD_DIR

-  if (args.pgo or args.thinlto) and not args.bootstrap:
-    print('--pgo/--thinlto requires --bootstrap')
+  if not args.bootstrap:
+    print('Customized build script requires --bootstrap')
     return 1
+  if args.with_goma:
+    print('Customized build script does not support --with-goma')
   if args.with_android and not os.path.exists(ANDROID_NDK_DIR):
     print('Android NDK not found at ' + ANDROID_NDK_DIR)
     print('The Android NDK is needed to build a Clang whose -fsanitize=address')
@@ -804,14 +815,12 @@ def main():
   # LLVM_ENABLE_LLD).
   cc, cxx, lld = None, None, None

-  cflags = []
-  cxxflags = []
-  ldflags = []
+  cflags = [ '-O3 -DNDEBUG -w -march=x86-64-v3 -ffp-contract=fast -fmerge-all-constants -fdata-sections -ffunction-sections' ]
+  cxxflags = [ '-O3 -DNDEBUG -w -march=x86-64-v3 -ffp-contract=fast -fmerge-all-constants -fdata-sections -ffunction-sections' ]
+  ldflags = [ '-fuse-ld=lld -Wl,-O2 -Wl,--gc-sections -Wl,--icf=all -Wl,--as-needed -Wl,--push-state,C:/mimalloc.lib,--pop-state' ]

   targets = 'AArch64;ARM;LoongArch;Mips;PowerPC;RISCV;SystemZ;WebAssembly;X86'
-  projects = 'clang;lld;clang-tools-extra'
-  if args.bolt:
-    projects += ';bolt'
+  projects = 'clang;lld;clang-tools-extra;polly;bolt'

   pic_default = sys.platform == 'win32'
   pic_mode = 'ON' if args.pic or pic_default else 'OFF'
@@ -823,7 +832,7 @@ def main():
       '-DLLVM_ENABLE_PROJECTS=' + projects,
       '-DLLVM_ENABLE_RUNTIMES=compiler-rt',
       '-DLLVM_TARGETS_TO_BUILD=' + targets,
-      f'-DLLVM_ENABLE_PIC={pic_mode}',
+      '-DLLVM_ENABLE_PIC=ON',
       '-DLLVM_ENABLE_TERMINFO=OFF',
       '-DLLVM_ENABLE_Z3_SOLVER=OFF',
       '-DCLANG_PLUGIN_SUPPORT=OFF',
@@ -960,11 +969,11 @@ def main():
       bootstrap_targets += ';ARM;AArch64'
     bootstrap_args = base_cmake_args + goma_cmake_args + [
         '-DLLVM_TARGETS_TO_BUILD=' + bootstrap_targets,
-        '-DLLVM_ENABLE_PROJECTS=clang;lld',
+        '-DLLVM_ENABLE_PROJECTS=clang;lld;polly',
         '-DLLVM_ENABLE_RUNTIMES=' + ';'.join(runtimes),
         '-DCMAKE_INSTALL_PREFIX=' + LLVM_BOOTSTRAP_INSTALL_DIR,
-        '-DCMAKE_C_FLAGS=' + ' '.join(cflags),
-        '-DCMAKE_CXX_FLAGS=' + ' '.join(cxxflags),
+        '-DCMAKE_C_FLAGS=-mprefer-vector-width=128 ' + ' '.join(cflags),
+        '-DCMAKE_CXX_FLAGS=-mprefer-vector-width=128 ' + ' '.join(cxxflags),
         '-DCMAKE_EXE_LINKER_FLAGS=' + ' '.join(ldflags),
         '-DCMAKE_SHARED_LINKER_FLAGS=' + ' '.join(ldflags),
         '-DCMAKE_MODULE_LINKER_FLAGS=' + ' '.join(ldflags),
@@ -1020,9 +1029,9 @@ def main():
     os.chdir(LLVM_INSTRUMENTED_DIR)

     instrument_args = base_cmake_args + [
-        '-DLLVM_ENABLE_PROJECTS=clang',
-        '-DCMAKE_C_FLAGS=' + ' '.join(cflags),
-        '-DCMAKE_CXX_FLAGS=' + ' '.join(cxxflags),
+        '-DLLVM_ENABLE_PROJECTS=clang;polly',
+        '-DCMAKE_C_FLAGS=-mprefer-vector-width=128 -mllvm -vp-counters-per-site=3 -mllvm -polly -mllvm -polly-invariant-load-hoisting ' + ' '.join(cflags),
+        '-DCMAKE_CXX_FLAGS=-mprefer-vector-width=128 -mllvm -vp-counters-per-site=3 -mllvm -polly -mllvm -polly-invariant-load-hoisting ' + ' '.join(cxxflags),
         '-DCMAKE_EXE_LINKER_FLAGS=' + ' '.join(ldflags),
         '-DCMAKE_SHARED_LINKER_FLAGS=' + ' '.join(ldflags),
         '-DCMAKE_MODULE_LINKER_FLAGS=' + ' '.join(ldflags),
@@ -1065,8 +1074,12 @@ def main():
     with open(training_source, 'wb') as f:
       DownloadUrl(CDS_URL + '/' + training_source, f)
     train_cmd = [os.path.join(LLVM_INSTRUMENTED_DIR, 'bin', 'clang++'),
-                '-target', 'x86_64-unknown-unknown', '-O2', '-g', '-std=c++14',
-                 '-fno-exceptions', '-fno-rtti', '-w', '-c', training_source]
+                '-target', 'x86_64-unknown-unknown', '-O3',
+                '-march=x86-64-v3', '-ffp-contract=fast',
+                '-fmerge-all-constants', '-fdata-sections', '-ffunction-sections',
+                '-mllvm', '-polly', '-mllvm', '-polly-invariant-load-hoisting',
+                '-g', '-std=c++14','-fno-exceptions', '-fno-rtti', '-w', '-c',
+                training_source]
     if sys.platform == 'darwin':
       train_cmd.extend(['-isysroot', isysroot])
     RunCommand(train_cmd, setenv=True)
@@ -1105,7 +1118,7 @@ def main():
   # Keep static relocations in the executable for BOLT to analyze. Resolve all
   # symbols on program start to allow BOLT's PLT optimization.
   if args.bolt:
-    ldflags += ['-Wl,--emit-relocs', '-Wl,-znow']
+    ldflags += ['-Wl,--emit-relocs', '-Wl,-znow', '-Wl,-z,keep-text-section-prefix',]

   chrome_tools = []
   if not args.no_tools:
@@ -1116,8 +1129,8 @@ def main():
   if lld is not None: base_cmake_args.append('-DCMAKE_LINKER=' + lld)
   final_install_dir = args.install_dir if args.install_dir else LLVM_BUILD_DIR
   cmake_args = base_cmake_args + [
-      '-DCMAKE_C_FLAGS=' + ' '.join(cflags),
-      '-DCMAKE_CXX_FLAGS=' + ' '.join(cxxflags),
+      '-DCMAKE_C_FLAGS=-mprefer-vector-width=128 ' + ' '.join(cflags),
+      '-DCMAKE_CXX_FLAGS=-mprefer-vector-width=128 ' + ' '.join(cxxflags),
       '-DCMAKE_EXE_LINKER_FLAGS=' + ' '.join(ldflags),
       '-DCMAKE_SHARED_LINKER_FLAGS=' + ' '.join(ldflags),
       '-DCMAKE_MODULE_LINKER_FLAGS=' + ' '.join(ldflags),
@@ -1132,8 +1145,23 @@ def main():
     ])
   if args.pgo:
     cmake_args.append('-DLLVM_PROFDATA_FILE=' + LLVM_PROFDATA_FILE)
+    cmake_args.append('-DCMAKE_C_FLAGS=-fsplit-machine-functions ' + ' '.join(cxxflags))
+    cmake_args.append('-DCMAKE_CXX_FLAGS=-fsplit-machine-functions ' + ' '.join(cxxflags))
+    if not args.thinlto:
+      cmake_args.append('-DCMAKE_C_FLAGS=-mllvm -enable-ext-tsp-block-placement=1 ' + ' '.join(cxxflags))
+      cmake_args.append('-DCMAKE_CXX_FLAGS=-mllvm -enable-ext-tsp-block-placement=1 ' + ' '.join(cxxflags))
   if args.thinlto:
     cmake_args.append('-DLLVM_ENABLE_LTO=Thin')
+    cmake_args.append('-DLLVM_PARALLEL_LINK_JOBS=16')
+    cmake_args.append('-DCMAKE_C_FLAGS=-flto=thin -fno-split-lto-unit -fwhole-program-vtables ' + ' '.join(cflags))
+    cmake_args.append('-DCMAKE_CXX_FLAGS=-flto=thin -fno-split-lto-unit -fwhole-program-vtables ' + ' '.join(cxxflags))
+    cmake_args.append('-DCMAKE_EXE_LINKER_FLAGS=-flto=thin -fwhole-program-vtables -Wl,-mllvm,-import-instr-limit=100 -Wl,--lto-O3 -Wl,--lto-CGO3 -Wl,--thinlto-jobs=all -Wl,-mllvm,-polly -Wl,-mllvm,-polly-invariant-load-hoisting ' + ' '.join(ldflags))
+    cmake_args.append('-DCMAKE_SHARED_LINKER_FLAGS=-flto=thin -fwhole-program-vtables -Wl,-mllvm,-import-instr-limit=100 -Wl,--lto-O3 -Wl,--lto-CGO3 -Wl,--thinlto-jobs=all -Wl,-mllvm,-polly -Wl,-mllvm,-polly-invariant-load-hoisting ' + ' '.join(ldflags))
+    cmake_args.append('-DCMAKE_MODULE_LINKER_FLAGS=-flto=thin -fwhole-program-vtables -Wl,-mllvm,-import-instr-limit=100 -Wl,--lto-O3 -Wl,--lto-CGO3 -Wl,--thinlto-jobs=all -Wl,-mllvm,-polly -Wl,-mllvm,-polly-invariant-load-hoisting ' + ' '.join(ldflags))
+    if args.pgo:
+      cmake_args.append('-DCMAKE_EXE_LINKER_FLAGS=-Wl,-mllvm,-enable-ext-tsp-block-placement=1 ' + ' '.join(ldflags))
+      cmake_args.append('-DCMAKE_SHARED_LINKER_FLAGS=-Wl,-mllvm,-enable-ext-tsp-block-placement=1 ' + ' '.join(ldflags))
+      cmake_args.append('-DCMAKE_MODULE_LINKER_FLAGS=-Wl,-mllvm,-enable-ext-tsp-block-placement=1 ' + ' '.join(ldflags))
   if sys.platform == 'win32':
     cmake_args.append('-DLLVM_ENABLE_ZLIB=FORCE_ON')

@@ -1438,7 +1466,7 @@ def main():
     # Instrument.
     RunCommand([
         'bin/llvm-bolt', 'bin/clang', '-o', 'bin/clang-bolt.inst',
-        '-instrument', '--instrumentation-file-append-pid',
+        '--lite=false', '-instrument', '--instrumentation-file-append-pid',
         '--instrumentation-file=' +
         os.path.join(bolt_profiles_dir, 'prof.fdata')
     ])
@@ -1467,6 +1495,8 @@ def main():
         os.path.join(LLVM_BUILD_DIR, 'bin/clang-bolt.inst'),
         '-DCMAKE_ASM_COMPILER_ID=Clang',
     ]
+    bolt_train_cmake_args.append('-DCMAKE_C_FLAGS=-mllvm -polly -mllvm -polly-invariant-load-hoisting ' + ' '.join(cflags))
+    bolt_train_cmake_args.append('-DCMAKE_CXX_FLAGS=-mllvm -polly -mllvm -polly-invariant-load-hoisting ' + ' '.join(cxxflags))
     RunCommand(['cmake'] + bolt_train_cmake_args +
                [os.path.join(LLVM_DIR, 'llvm')])
     RunCommand([
@@ -1483,9 +1513,14 @@ def main():
     ])
     RunCommand([
         'bin/llvm-bolt', 'bin/clang', '-o', 'bin/clang-bolt.opt', '-data',
-        'merged.fdata', '-reorder-blocks=ext-tsp', '-reorder-functions=hfsort+',
-        '-split-functions', '-split-all-cold', '-split-eh', '-dyno-stats',
-        '-icf=1', '-use-gnu-stack', '-use-old-text'
+        'merged.fdata', '--reorder-blocks=ext-tsp', '--reorder-functions=hfsort+',
+        '--split-functions', '--split-all-cold', '--split-eh', '--dyno-stats',
+        '--icf', '--use-gnu-stack', '--use-old-text', '--peepholes=all',
+        '--elim-link-veneers', '--group-stubs', '--align-blocks', '--sctc-mode=heuristic',
+        '--jump-tables=aggressive', '--simplify-conditional-tail-calls',
+        '--simplify-rodata-loads', '--align-macro-fusion=all', '--eliminate-unreachable',
+        '--tail-duplication=cache', '--indirect-call-promotion=all', '--icp-eliminate-loads',
+        '--hot-data', '--x86-strip-redundant-address-size', '--lite=false',
     ])

     # Overwrite clang, preserving its timestamp so ninja doesn't rebuild it.